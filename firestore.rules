
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for authorized roles
    function isAuthorized() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin'];
    }

    // Users can only read/write their own data
    match /users/{userId}/{document=**} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Teachers/Admins can manage classes
    match /classes/{classId} {
      allow read: if request.auth != null;
      allow create: if isAuthorized();
      allow update, delete: if isAuthorized() && resource.data.teacherId == request.auth.uid;
    }

    // Teachers/Admins can manage assignments
    match /assignments/{assignmentId} {
      allow read: if request.auth != null;
      allow create: if isAuthorized();
      allow update, delete: if isAuthorized() && resource.data.teacherId == request.auth.uid;
    }
    
    // Feedback can be read by involved parties, created by teachers, and deleted by teachers
    match /feedback/{feedbackId} {
      allow read: if request.auth != null && (resource.data.teacherId == request.auth.uid || resource.data.studentId == request.auth.uid);
      allow create: if isAuthorized();
      allow update: if request.auth != null && resource.data.studentId == request.auth.uid && writeFields.size() == 1 && 'isRead' in writeFields;
      allow delete: if isAuthorized() && resource.data.teacherId == request.auth.uid;
    }

  }
}

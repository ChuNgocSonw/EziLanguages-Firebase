
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role in ['admin', 'superadmin'];
    }

    function isTeacher(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) &&
             get(/databases/$(database)/documents/users/$(userId)).data.role in ['teacher', 'admin', 'superadmin'];
    }

    // Rule for the user document itself
    match /users/{userId} {
      // Users can read/write their own data. Teachers/Admins can read any user's data. Admins can write.
      allow read: if request.auth.uid == userId || isTeacher(request.auth.uid) || isAdmin(request.auth.uid);
      allow write: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    // Rule for the quizHistory sub-collection
    match /users/{studentId}/quizHistory/{historyId} {
      // Only the student, a teacher, or an admin can read.
      allow read: if request.auth.uid == studentId || isTeacher(request.auth.uid) || isAdmin(request.auth.uid);
      // Only the student or an admin can write.
      allow write: if request.auth.uid == studentId || isAdmin(request.auth.uid);
    }
    
    // Rule for the assignmentAttempts sub-collection
    match /users/{studentId}/assignmentAttempts/{attemptId} {
      // Only the student, a teacher, or an admin can read.
      allow read: if request.auth.uid == studentId || isTeacher(request.auth.uid) || isAdmin(request.auth.uid);
       // Only the student or an admin can write.
      allow write: if request.auth.uid == studentId || isAdmin(request.auth.uid);
    }
    
    // Rule for the chats sub-collection (students own their chat history)
    match /users/{userId}/chats/{chatId}/{document=**} {
      allow read, write: if request.auth.uid == userId || isAdmin(request.auth.uid);
    }
    
    match /classes/{classId} {
      allow read: if isTeacher(request.auth.uid);
      allow create: if isTeacher(request.auth.uid);
      allow update, delete: if isTeacher(request.auth.uid) && resource.data.teacherId == request.auth.uid;
    }
    
    match /assignments/{assignmentId} {
      allow read: if request.auth.uid != null; // Students and teachers can read assignments
      allow create, update, delete: if isTeacher(request.auth.uid);
    }
    
    match /feedback/{feedbackId} {
      allow read: if request.auth.uid == resource.data.studentId || request.auth.uid == resource.data.teacherId || isAdmin(request.auth.uid);
      allow create: if isTeacher(request.auth.uid);
      allow update: if request.auth.uid == resource.data.studentId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      allow delete: if request.auth.uid == resource.data.teacherId || isAdmin(request.auth.uid);
    }
  }
}

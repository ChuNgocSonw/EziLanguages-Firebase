
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).role in ['admin', 'superadmin'];
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isTeacherOfStudent(studentId) {
        let studentData = getUserData(studentId);
        let classData = get(/databases/$(database)/documents/classes/$(studentData.classId)).data;
        return classData.teacherId == request.auth.uid;
    }

    // Rules for Collections
    match /users/{userId} {
      allow read: if isSignedIn() && (
                    isOwner(userId) || 
                    isAdmin() ||
                    (isRole('teacher') && isTeacherOfStudent(userId))
                  );
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    match /classes/{classId} {
      allow create: if isRole('teacher') || isAdmin();
      allow read: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) || 
                   (isRole('student') && getUserData(request.auth.uid).classId == classId) || 
                   isAdmin();
      allow update, delete: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) || isAdmin();
    }

    match /assignments/{assignmentId} {
      allow create: if isRole('teacher') || isAdmin();
      allow read: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) ||
                   (isRole('student') && getUserData(request.auth.uid).classId in resource.data.assignedClasses) ||
                   isAdmin();
      allow update, delete: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) || isAdmin();
    }

    match /lessons/{lessonId} {
      allow create, update, delete: if isAdmin();
      allow read: if isSignedIn();
    }

    match /feedback/{feedbackId} {
      allow create: if isRole('teacher') || isAdmin();
      allow read: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) ||
                   (isRole('student') && resource.data.studentId == request.auth.uid) ||
                   isAdmin();
      allow update: if isRole('student') && resource.data.studentId == request.auth.uid; // Student can mark as read
      allow delete: if (isRole('teacher') && resource.data.teacherId == request.auth.uid) || isAdmin();
    }

    // Rules for User Subcollections
    match /users/{userId}/{collectionId}/{docId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isStudent() {
      return isSignedIn() && getUserData(request.auth.uid).data.role == 'student';
    }
    
    function isTeacher() {
      return isSignedIn() && getUserData(request.auth.uid).data.role == 'teacher';
    }

    function isAdmin() {
      return isSignedIn() && (getUserData(request.auth.uid).data.role == 'admin' || getUserData(request.auth.uid).data.role == 'superadmin');
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }
    
    function isTeacherOfClass(classId) {
        return isSignedIn() && get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }
    
    function isTeacherOfStudent(studentId) {
        let studentData = getUserData(studentId).data;
        return studentData.classId != null && isTeacherOfClass(studentData.classId);
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || isTeacherOfStudent(userId));
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin());

      match /quizHistory/{attemptId} {
        allow read, write: if isOwner(userId);
      }
      match /assignmentAttempts/{attemptId} {
        allow read, write: if isOwner(userId);
      }
      match /chats/{chatId} {
        allow read, write: if isOwner(userId);
        match /messages/{messageId} {
          allow read, write: if isOwner(userId);
        }
      }
    }

    match /classes/{classId} {
        allow read, write: if isSignedIn() && (isTeacherOfClass(classId) || isAdmin());
    }
    
    match /assignments/{assignmentId} {
        allow create, update, delete: if isTeacher() && request.resource.data.teacherId == request.auth.uid;
        allow read: if (isTeacher() && resource.data.teacherId == request.auth.uid) ||
                      (isStudent() && getUserData(request.auth.uid).data.classId in resource.data.assignedClasses) ||
                      isAdmin();
    }
    
    match /feedback/{feedbackId} {
        allow create: if isTeacher();
        allow read: if isSignedIn() && (resource.data.studentId == request.auth.uid || resource.data.teacherId == request.auth.uid);
        allow update(resource, request.resource): if request.resource.data.isRead == true && resource.data.isRead == false; // Student can mark as read
        allow delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
    }
    
    match /lessons/{lessonId} {
      allow read: if isSignedIn(); // All signed in users can read lessons
      allow write: if isAdmin(); // Only admins can create/edit/delete lessons
    }

  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId));
    }

    function getRole(userId) {
      return getUserData(userId).data.role;
    }

    function isAdmin() {
      let role = getRole(request.auth.uid);
      return isSignedIn() && (role == 'admin' || role == 'superadmin');
    }

    function isTeacher() {
      return isSignedIn() && getRole(request.auth.uid) == 'teacher';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isTeacherOfStudent(studentId) {
      let studentClassId = getUserData(studentId).data.classId;
      return studentClassId != null && get(/databases/$(database)/documents/classes/$(studentClassId)).data.teacherId == request.auth.uid;
    }

    // Rules for collections
    match /users/{userId} {
      allow read: if isSignedIn() && (isOwner(userId) || isAdmin() || (isTeacher() && isTeacherOfStudent(userId)));
      allow write: if isSignedIn() && (isOwner(userId) || isAdmin());
    }

    match /classes/{classId} {
      allow read: if isSignedIn() && (isAdmin() || (isTeacher() && resource.data.teacherId == request.auth.uid));
      allow write: if isSignedIn() && (isAdmin() || (isTeacher() && resource.data.teacherId == request.auth.uid));
      allow create: if isSignedIn() && (isTeacher() || isAdmin());
      allow delete: if isSignedIn() && (isTeacher() && resource.data.teacherId == request.auth.uid || isAdmin());
    }

    match /assignments/{assignmentId} {
      allow create, update, delete: if isSignedIn() && (isTeacher() || isAdmin());
      // A student can read an assignment if their classId is in the assignment's list of assigned classes
      allow read: if isSignedIn() && (
        (isTeacher() && resource.data.teacherId == request.auth.uid) || 
        isAdmin() ||
        (getUserData(request.auth.uid).data.classId in resource.data.assignedClasses)
      );
    }
    
    match /lessons/{lessonId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /feedback/{feedbackId} {
      allow create: if isTeacher() || isAdmin();
      allow read: if isSignedIn() && (resource.data.studentId == request.auth.uid || resource.data.teacherId == request.auth.uid || isAdmin());
      allow update(data): if isSignedIn() && resource.data.studentId == request.auth.uid && data.keys().hasOnly(['isRead']);
      allow delete: if (isTeacher() || isAdmin()) && resource.data.teacherId == request.auth.uid;
    }

    // User-specific subcollections
    match /users/{userId}/{collection}/{docId} {
      allow read, write: if isSignedIn() && isOwner(userId);
    }
  }
}

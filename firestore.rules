
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check the role of the user making the request
    function getRequestingUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to get the teacher ID for a given class ID
    function getClassTeacherId(classId) {
      return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId;
    }

    match /users/{userId} {
      allow list: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == userId || getRequestingUserRole() in ['admin', 'superadmin']);
      allow create: if request.auth != null;

      allow update: if request.auth != null &&
                    (
                      (request.auth.uid == userId && request.resource.data.role == resource.data.role && (!('classId' in request.resource.data) || request.resource.data.classId == resource.data.classId) ) ||
                      (getRequestingUserRole() in ['teacher', 'admin', 'superadmin'] && resource.data.role == 'student') ||
                      (getRequestingUserRole() == 'admin' && resource.data.role in ['student', 'teacher']) ||
                      (getRequestingUserRole() == 'superadmin' && resource.data.role in ['student', 'teacher', 'admin'])
                    );

      match /chats/{chatId} {
        allow read, create, delete: if request.auth != null && request.auth.uid == userId;
        match /messages/{messageId} {
          allow read, create, delete: if request.auth != null && request.auth.uid == userId;
        }
      }

      match /quizHistory/{quizId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
      }

      // --- UPDATED RULE ---
      // Allow read if:
      // 1. The user is the student themselves.
      // 2. The requesting user is a teacher, and the student belongs to a class taught by that teacher.
      match /assignmentAttempts/{attemptId} {
        allow create: if request.auth != null && request.auth.uid == userId;
        allow read: if request.auth != null && 
                    (
                      request.auth.uid == userId ||
                      (
                        getRequestingUserRole() in ['teacher', 'admin', 'superadmin'] &&
                        resource.data.classId != null &&
                        getClassTeacherId(resource.data.classId) == request.auth.uid
                      )
                    );
      }
    }

    match /classes/{classId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                    && request.resource.data.teacherId == request.auth.uid
                    && getRequestingUserRole() in ['teacher', 'admin', 'superadmin'];
      allow update, delete: if request.auth != null 
                           && resource.data.teacherId == request.auth.uid;
    }
     match /assignments/{assignmentId} {
      allow create: if request.auth != null && getRequestingUserRole() in ['teacher', 'admin', 'superadmin'];
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user roles
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      let userRole = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return userRole in roles;
    }

    function isOwner(doc) {
      return doc.data.teacherId == request.auth.uid;
    }
    
    function isStudentInClass(classId) {
       return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId == classId;
    }
    
    // Check if the teacher requesting access is the teacher of the student's class
    function isTeacherOfStudent(studentId) {
        let student = get(/databases/$(database)/documents/users/$(studentId)).data;
        // Check if the student has a classId
        if (!('classId' in student)) {
            return false;
        }
        let classDoc = get(/databases/$(database)/documents/classes/$(student.classId)).data;
        return classDoc.teacherId == request.auth.uid;
    }

    // USERS collection
    match /users/{userId} {
      allow read: if request.auth.uid == userId 
                   || isOneOfRoles(['admin', 'superadmin']) 
                   || (isRole('teacher') && isTeacherOfStudent(userId));
                   
      allow write: if request.auth.uid == userId 
                    || isOneOfRoles(['admin', 'superadmin']);

      // Subcollections for user-specific data
      match /quizHistory/{docId} {
        allow read, write: if request.auth.uid == userId;
      }
      match /assignmentAttempts/{docId} {
         allow read, write: if request.auth.uid == userId;
      }
      match /chats/{chatId} {
        allow read, write, delete: if request.auth.uid == userId;
        match /messages/{messageId} {
          allow read, write, create: if request.auth.uid == userId;
        }
      }
    }
    
    // CLASSES collection
    match /classes/{classId} {
        allow read: if isOneOfRoles(['admin', 'superadmin']) 
                     || isOwner(get(/databases/$(database)/documents/classes/$(classId)))
                     || isStudentInClass(classId);
                     
        allow create: if isOneOfRoles(['teacher', 'admin', 'superadmin']);
        
        allow update, delete: if isOneOfRoles(['admin', 'superadmin']) 
                               || isOwner(get(/databases/$(database)/documents/classes/$(classId)));
    }
    
    // ASSIGNMENTS collection
    match /assignments/{assignmentId} {
        allow read: if isOneOfRoles(['admin', 'superadmin'])
                     || isOwner(get(/databases/$(database)/documents/assignments/$(assignmentId)))
                     || get(/databases/$(database)/documents/assignments/$(assignmentId)).data.assignedClasses[0].classId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId;

        allow create: if isOneOfRoles(['teacher', 'admin', 'superadmin']);
        
        allow update, delete: if isOneOfRoles(['admin', 'superadmin']) 
                               || isOwner(get(/databases/$(database)/documents/assignments/$(assignmentId)));
    }
    
    // FEEDBACK collection
    match /feedback/{feedbackId} {
        allow read: if request.auth.uid == resource.data.studentId 
                     || request.auth.uid == resource.data.teacherId
                     || isOneOfRoles(['admin', 'superadmin']);
                     
        allow create: if isOneOfRoles(['teacher', 'admin', 'superadmin']);
        
        allow update, delete: if request.auth.uid == resource.data.teacherId 
                               || isOneOfRoles(['admin', 'superadmin']);
    }
    
    // LESSONS collection
    match /lessons/{lessonId} {
        allow read: if isOneOfRoles(['student', 'teacher', 'admin', 'superadmin']);
        
        allow create, update, delete: if isOneOfRoles(['admin', 'superadmin']);
    }

  }
}

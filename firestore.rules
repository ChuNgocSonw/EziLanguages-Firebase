
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isStudent() {
      return isSignedIn() && getUserRole() == 'student';
    }

    function isTeacher() {
      return isSignedIn() && getUserRole() in ['teacher', 'admin', 'superadmin'];
    }
    
    function isAdmin() {
        return isSignedIn() && getUserRole() in ['admin', 'superadmin'];
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Admins have full access
    match /{document=**} {
        allow read, write: if isAdmin();
    }

    // Users collection
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isOwner(userId);
    }
    
    match /users/{userId}/{document=**} {
        allow read, write: if isOwner(userId);
    }
    
    // Classes collection
    match /classes/{classId} {
      allow read: if isSignedIn();
      allow create, update, delete: if isTeacher();
    }

    // Assignments collection
    match /assignments/{assignmentId} {
      allow read: if isTeacher() || (isStudent() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.classId in 
          resource.data.assignedClasses.map(c => c.classId)
      );
      allow create, update, delete: if isTeacher();
    }
    
    // Feedback collection - Allow teachers to list their sent feedback
    match /feedback/{docId=**} {
        allow list: if isTeacher();
    }
    
    // Feedback collection - Granular access for individual documents
    match /feedback/{docId} {
        allow read: if isTeacher() && resource.data.teacherId == request.auth.uid || 
                       isStudent() && resource.data.studentId == request.auth.uid;
        allow create: if isTeacher();
        allow delete: if isTeacher() && resource.data.teacherId == request.auth.uid;
        allow update: if isStudent() && resource.data.studentId == request.auth.uid; // Student can mark as read
    }
  }
}

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check user roles
    function isRole(role) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }
    
    function isOneOfRoles(roles) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }

    // Helper function to check if the requesting user is the teacher of a given class
    function isTeacherOfClass(classId) {
      return get(/databases/$(database)/documents/classes/$(classId)).data.teacherId == request.auth.uid;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own user document (on first login)
      allow create: if request.auth != null;

      // Users can read their own data.
      // Admins/Superadmins can read any user's data.
      // Teachers can read a student's data if that student is in one of their classes.
      allow read: if request.auth.uid == userId
                  || isOneOfRoles(['admin', 'superadmin'])
                  || (isRole('teacher') && resource.data.role == 'student' && isTeacherOfClass(resource.data.classId));
                  
      // Users can update their own data.
      // Admins/Superadmins can update any user's data, but cannot change their own role to prevent self-escalation unless they are superadmin.
      allow update: if request.auth.uid == userId
                    || (isOneOfRoles(['admin', 'superadmin']) && (request.resource.data.role == resource.data.role || isRole('superadmin')));
    }

    // Rules for 'classes' collection
    match /classes/{classId} {
      // Only teachers, admins, or superadmins can create classes
      allow create: if isOneOfRoles(['teacher', 'admin', 'superadmin']);
      
      // Only the teacher of the class or an admin can read/update it
      allow read, update: if isTeacherOfClass(classId) || isOneOfRoles(['admin', 'superadmin']);
      
      // Only the teacher of the class or an admin can delete it
      allow delete: if resource.data.teacherId == request.auth.uid || isOneOfRoles(['admin', 'superadmin']);
    }
    
    // Rules for 'assignments' collection
    match /assignments/{assignmentId} {
       // Teachers and admins can create/update/delete assignments
      allow write: if isOneOfRoles(['teacher', 'admin', 'superadmin']);
      
      // Any authenticated user can read assignments (students need this)
      allow read: if request.auth != null;
    }

    // Rules for 'lessons' collection
    match /lessons/{lessonId} {
      // Only admins/superadmins can create, update, or delete lessons
      allow write: if isOneOfRoles(['admin', 'superadmin']);
      
      // Any authenticated user can read lessons
      allow read: if request.auth != null;
    }
    
    // Rules for 'feedback' collection
    match /feedback/{feedbackId} {
      // Teachers can create (send) feedback
      allow create: if isRole('teacher');
      
      // Only the sender (teacher) or receiver (student) can read the feedback
      allow read: if resource.data.teacherId == request.auth.uid || resource.data.studentId == request.auth.uid;
      
      // Only the sender can update (e.g., mark as read, though students do this) or delete
      allow update, delete: if resource.data.teacherId == request.auth.uid || resource.data.studentId == request.auth.uid;
    }

    // Subcollections within 'users'
    match /users/{userId}/{collection}/{docId} {
      // Users can read/write to their own subcollections (quizHistory, chats, etc.)
      allow read, write: if request.auth.uid == userId;
    }
  }
}

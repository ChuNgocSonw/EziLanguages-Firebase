rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && (getUserData(request.auth.uid).role == 'admin' || getUserData(request.auth.uid).role == 'superadmin');
    }

    function isTeacher() {
      return isSignedIn() && getUserData(request.auth.uid).role == 'teacher';
    }

    // A teacher can access a student's data if that student is in a class taught by that teacher.
    function isTeacherOfStudent(studentId) {
      let studentData = getUserData(studentId);
      // Check if student has a classId
      return 'classId' in studentData &&
             // Get the class document and check if the teacherId matches the current user
             get(/databases/$(database)/documents/classes/$(studentData.classId)).data.teacherId == request.auth.uid;
    }


    // RULES
    match /users/{userId} {
      allow read: if isSignedIn();
      allow write: if isUser(userId) || isAdmin();

      // Subcollections
      match /quizHistory/{docId} {
        allow read, write: if isUser(userId);
      }
      match /assignmentAttempts/{docId} {
        allow read, write: if isUser(userId);
      }
      match /chats/{chatId} {
        allow read, write, delete: if isUser(userId);
        match /messages/{messageId} {
          allow read, write: if isUser(userId);
        }
      }
    }

    match /classes/{classId} {
      allow read: if isSignedIn() && (
        getUserData(request.auth.uid).role == 'teacher' && resource.data.teacherId == request.auth.uid ||
        getUserData(request.auth.uid).classId == classId ||
        isAdmin()
      );
      allow create: if isTeacher() || isAdmin();
      allow update, delete: if isSignedIn() && (
        getUserData(request.auth.uid).role == 'teacher' && resource.data.teacherId == request.auth.uid ||
        isAdmin()
      );
    }

    match /assignments/{assignmentId} {
      allow read: if isTeacher() || isAdmin() || (isSignedIn() && getUserData(request.auth.uid).classId in resource.data.assignedClasses);
      allow create, update, delete: if isTeacher() || isAdmin();
    }

    match /lessons/{lessonId} {
        allow read: if isSignedIn();
        allow create, update, delete: if isAdmin();
    }

    match /feedback/{feedbackId} {
      allow read: if isSignedIn() && (resource.data.studentId == request.auth.uid || resource.data.teacherId == request.auth.uid || isAdmin());
      allow create: if isTeacher() || isAdmin();
      allow update: if isSignedIn() && resource.data.studentId == request.auth.uid; // Student can mark as read
      allow delete: if (isTeacher() && resource.data.teacherId == request.auth.uid) || isAdmin();
    }
  }
}


rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function getRequestingUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isTeacherOfStudent(studentId) {
      let student = get(/databases/$(database)/documents/users/$(studentId)).data;
      if (!('classId' in student)) {
        return false;
      }
      let classDoc = get(/databases/$(database)/documents/classes/$(student.classId)).data;
      return classDoc.teacherId == request.auth.uid;
    }

    match /users/{userId} {
      allow list: if request.auth != null;
      allow read: if request.auth != null && (request.auth.uid == userId || getRequestingUserRole() in ['admin', 'superadmin']);
      allow create: if request.auth != null;
      allow update: if request.auth != null &&
                    (
                      (request.auth.uid == userId && request.resource.data.role == resource.data.role && (!('classId' in request.resource.data) || request.resource.data.classId == resource.data.classId) ) ||
                      (getRequestingUserRole() in ['teacher', 'admin', 'superadmin'] && resource.data.role == 'student') ||
                      (getRequestingUserRole() == 'admin' && resource.data.role in ['student', 'teacher']) ||
                      (getRequestingUserRole() == 'superadmin' && resource.data.role in ['student', 'teacher', 'admin'])
                    );

      match /chats/{chatId} {
        allow read, create, delete: if request.auth != null && request.auth.uid == userId;
        match /messages/{messageId} {
          allow read, create, delete: if request.auth != null && request.auth.uid == userId;
        }
      }

      match /quizHistory/{quizId} {
        allow read, create: if request.auth != null && request.auth.uid == userId;
      }

      match /assignmentAttempts/{attemptId} {
        allow create: if request.auth != null && request.auth.uid == userId;
        allow read, list: if request.auth != null && 
                      (request.auth.uid == userId || isTeacherOfStudent(userId));
      }
    }

    match /classes/{classId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
                    && request.resource.data.teacherId == request.auth.uid
                    && getRequestingUserRole() in ['teacher', 'admin', 'superadmin'];
      allow update, delete: if request.auth != null 
                           && resource.data.teacherId == request.auth.uid;
    }
    
    match /assignments/{assignmentId} {
      allow create: if request.auth != null && getRequestingUserRole() in ['teacher', 'admin', 'superadmin'];
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }

    match /feedback/{feedbackId} {
      // Allow students to read/list feedback sent to them
      allow list, read: if request.auth != null && get(/databases/$(database)/documents/feedback/$(feedbackId)).data.studentId == request.auth.uid;
      // Allow students to update the 'isRead' status of their own feedback
      allow update: if request.auth != null && request.resource.data.studentId == request.auth.uid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isRead']);
      
      // Allow teachers to create feedback for their students
      allow create: if request.auth != null && request.resource.data.teacherId == request.auth.uid && getRequestingUserRole() in ['teacher', 'admin', 'superadmin'];
      // Allow teachers to read and delete feedback they have sent
      allow read, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }
  }
}

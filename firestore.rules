
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // =============================================================
    //   /users/{userId}
    // =============================================================
    match /users/{userId} {
      // READ:
      // - A user can read their own profile.
      // - A teacher/admin can read any user's profile.
      allow read: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin']
      );

      // WRITE: A user can only update their own profile, or an admin can update any profile.
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'superadmin']
      );

      // =============================================================
      //   Subcollections: quizHistory and assignmentAttempts
      // =============================================================
      match /{subcollection}/{docId} {
        // READ:
        // - A user can read their own subcollection documents.
        // - A teacher can read any user's subcollection documents (for AI analysis).
        allow read: if request.auth != null && (
          request.auth.uid == userId ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin']
        );

        // CREATE: A user can only create documents in their own subcollections.
        allow create: if request.auth != null && request.auth.uid == userId;
        
        // UPDATE, DELETE: No one can update or delete history.
        allow update, delete: if false;
      }
    }

    // =============================================================
    //   /classes/{classId}
    // =============================================================
    match /classes/{classId} {
      // READ: Authenticated users can read class lists.
      allow read: if request.auth != null;
      
      // CREATE: Only authenticated teachers/admins can create a class.
      allow create: if request.auth != null &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin'] &&
        request.resource.data.teacherId == request.auth.uid;

      // UPDATE, DELETE: Only the teacher who owns the class can modify it.
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }
    
    // =============================================================
    //   /assignments/{assignmentId}
    // =============================================================
    match /assignments/{assignmentId} {
      // READ: Authenticated users can read assignments.
      allow read: if request.auth != null;
      
      // CREATE: Only authenticated teachers/admins can create an assignment.
      allow create: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin'] &&
        request.resource.data.teacherId == request.auth.uid;

      // UPDATE, DELETE: Only the teacher who created the assignment can modify or delete it.
      allow update, delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }

    // =============================================================
    //   /feedback/{feedbackId}
    // =============================================================
    match /feedback/{feedbackId} {
      // READ:
      // - The teacher who sent it can read it.
      // - The student who received it can read it.
      allow read: if request.auth != null && (
        resource.data.teacherId == request.auth.uid ||
        resource.data.studentId == request.auth.uid
      );
      
      // CREATE: Only teachers can create feedback.
      allow create: if request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['teacher', 'admin', 'superadmin'];
      
      // UPDATE: The student can update to mark as read.
      allow update: if request.auth != null && request.resource.data.isRead == true && resource.data.isRead == false && resource.data.studentId == request.auth.uid;
      
      // DELETE: The teacher who sent it can delete it.
      allow delete: if request.auth != null && resource.data.teacherId == request.auth.uid;
    }
  }
}

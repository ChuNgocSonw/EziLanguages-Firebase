rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function requesterRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    function isRequesterAdmin() {
      let role = requesterRole();
      return isAuth() && (role == 'admin' || role == 'superadmin');
    }

    function isRequesterTeacher() {
      let role = requesterRole();
      return isAuth() && (role == 'teacher' || isRequesterAdmin());
    }

    match /users/{userId} {
      // Allow reading one's own profile, or if requester is an admin/teacher.
      allow get: if isOwner(userId) || isRequesterTeacher();
      // Only admins/teachers can list multiple users (e.g., for user management or class lists).
      // Note: Listing all users can be performance-intensive. Security rules here are permissive;
      // client-side queries should be specific and limited.
      allow list: if isRequesterTeacher();
      // Users can update their own profile. Admins can update any profile.
      allow write: if isOwner(userId) || isRequesterAdmin();

      match /quizHistory/{docId} {
        allow read: if isOwner(userId) || isRequesterTeacher();
        allow write: if isOwner(userId);
      }
      
      match /assignmentAttempts/{docId} {
         allow read: if isOwner(userId) || isRequesterTeacher();
         allow write: if isOwner(userId);
      }
    }

    match /classes/{classId} {
      allow read: if isAuth(); 
      // Only teachers and admins can create/modify/delete classes.
      // Additional check on write can be: request.resource.data.teacherId == request.auth.uid
      allow create, update, delete: if isRequesterTeacher();
    }
    
    match /assignments/{assignmentId} {
        allow read: if isAuth();
        // Only teachers and admins can manage assignments.
        // Additional check on write can be: request.resource.data.teacherId == request.auth.uid
        allow create, update, delete: if isRequesterTeacher();
    }
    
    match /feedback/{feedbackId} {
        allow read: if isAuth() && (resource.data.teacherId == request.auth.uid || resource.data.studentId == request.auth.uid || isRequesterAdmin());
        allow create: if isRequesterTeacher();
        allow update: if isAuth() && resource.data.studentId == request.auth.uid; // Student can mark as read
        allow delete: if isAuth() && (resource.data.teacherId == request.auth.uid || isRequesterAdmin());
    }
  }
}
